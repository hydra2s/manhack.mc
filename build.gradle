plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0-RC2'
}

sourceCompatibility = JavaVersion.VERSION_19
targetCompatibility = JavaVersion.VERSION_19

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

wrapper {
    gradleVersion = '8.1-20221230234309+0000'
    distributionUrl = distributionUrl.replace("bin", "all")
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    mavenCentral()
}

project.ext.lwjglVersion = "3.3.2-SNAPSHOT"
project.ext.lwjglNatives = "natives-windows"
project.ext.jomlVersion = "1.10.4"
project.ext.winNatives = "natives-windows"
project.ext.linuxNatives = "natives-linux"

loom {
    accessWidenerPath = file("src/main/resources/modid.accessWidener")
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Uncomment the following line to enable the deprecated Fabric API modules.
    // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

    // modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

    include(implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion"))
    include(implementation group: 'org.bytedeco', name: 'javacpp', version: '1.5.9-SNAPSHOT')
    include(implementation "org.lwjgl:lwjgl")
    //include(implementation "org.lwjgl:lwjgl-assimp")
    include(implementation "org.lwjgl:lwjgl-glfw")
    include(implementation "org.lwjgl:lwjgl-openal")
    include(implementation "org.lwjgl:lwjgl-stb")
    include(implementation "org.lwjgl:lwjgl-vma")
    include(implementation "org.lwjgl:lwjgl-vulkan")
    include(runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives")
    //include(runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives")
    include(runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives")
    include(runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives")
    include(runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives")
    include(runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives")
    include(implementation("org.lwjgl:lwjgl:$lwjglVersion"))
    include(implementation("org.lwjgl:lwjgl-vulkan:$lwjglVersion"))
    include(implementation("org.joml:joml:${jomlVersion}"))
    include(implementation("org.lwjgl:lwjgl-vma:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$linuxNatives"))
    include(implementation("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$linuxNatives"))
    include(implementation("org.lwjgl:lwjgl-stb:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$linuxNatives"))
    include(implementation("org.lwjgl:lwjgl-openal:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$linuxNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$linuxNatives"))
    include(implementation("org.lwjgl:lwjgl-shaderc:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$linuxNatives"))
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    //include(implementation("me.modmuss50:voyager-2:2.0.0"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 19
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
